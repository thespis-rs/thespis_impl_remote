package:

  # When releasing to crates.io:
  #
  # - last check for all TODO, FIXME, expect, unwrap.
  # - recheck log statements (informative, none left that were just for development, ...)
  # - `cargo +nightly doc` and re-read and final polish of documentation.
  #
  # - Update CHANGELOG.md.
  # - Update version numbers in Cargo.yml, Cargo.toml, install section of readme.
  #
  # - `touch **.rs && cargo clippy --tests --examples --benches --all-features`
  # - `cargo update`
  # - `cargo udeps --all-targets --all-features`
  # - `cargo audit`
  # - `cargo crev crate verify --show-all --recursive` and review.
  # - 'cargo test --all-targets --all-features'
  #
  # - push dev and verify CI result
  # - `cargo test` on dependent crates
  #
  # - cargo publish
  # - `git checkout master && git merge dev --no-ff`
  # - `git tag x.x.x` with version number.
  # - `git push && git push --tags`
  #
  version       : 0.1.0
  name          : thespis_remote
  edition       : '2018'
  authors       : [ Naja Melan <najamelan@autistici.org> ]
  description   : Reference implementation for thespis remote actors
  license       : Unlicense
  homepage      : https://github.com/thespis-rs/thespis_remote
  repository    : https://github.com/thespis-rs/thespis_remote
  documentation : https://docs.rs/thespis_remote
  readme        : README.md
  keywords      : [ async, futures, actor, thespis ]
  categories    : [ Asynchronous, Concurrency, network-programming ]

  metadata:
    docs:
      rs:
        all-features: true

badges:

  maintenance : { status     : actively-developed        }
  travis-ci   : { repository : thespis-rs/thespis_remote }

features:

  default: [ futures_codec ]

  # Enable creating a peer directly from a type that implements AsyncRead+AsyncWrite
  # from the futures library, and enables the codec to frame such connection.
  #
  futures_codec: [ futures_codec_crate, futures_cbor_codec ]

  # Enable creating a peer directly from a type that implements AsyncRead+AsyncWrite
  # from the futures library, and enables the codec to frame such connection.
  #
  tokio_codec  : [ tokio, tokio-util, tokio-serde-cbor ]

  wasm: [ futures-timer/wasm-bindgen ]

  # only used internally, don't use
  #
  external_doc: []


lib:

  bench: false


dependencies:

  # public dependencies (bump major if you change their version number here)
  #
  # The ServiceID hash must be stable.
  #
  twox-hash           : { version: ^1                                                       }
  serde               : { version: ^1  , default-features: false, features: [ derive ]      }
  serde_bytes         : ^0.11
  serde_cbor          : { version: ^0.11                                                    }
  futures             : { version: =0.3.4, features: [ std, compat ], default-features: false }
  futures-util        : { version: =0.3.4 }
  futures-macro       : { version: =0.3.4 }
  futures_codec_crate : { version: ^0.4, optional: true, package: futures_codec             }
  futures_cbor_codec  : { version: ^0.2, optional: true                                     }
  async_executors     : { version: ^0.2, features: [ spawn_handle ]                         }

  # Bytes is a public dep of futures_codec
  #
  bytes               : { version: ^0.5    }

  # Pharos events are public on Peer
  #
  pharos              : { version: ^0.4    }
  thespis             : { path: ../thespis }
  byteorder           : ^1

  # tokio stuff, AsyncRead/Write and Codecs are in the public API
  #
  tokio     : { version: ^0.2, features: [ io-util ], optional: true }
  tokio-util: { version: ^0.2, features: [ codec   ], optional: true }


  # private deps. TODO: verify for thespis_impl before release.
  #
  thespis_impl        : { path: ../thespis_impl   }
  log                 : ^0.4
  once_cell           : ^1
  rand                : { version: ^0.7, default-features: false }
  parking_lot         : { version: ^0.10 }
  tokio-serde-cbor    : { version: ^0.4, optional: true }
  futures-timer       : { version: ^3 }
  num_cpus            : ^1
  async_nursery       : ^0.1

  # thiserror shouldn't have any public impact, but if they make a breaking change, take care to double check.
  #
  thiserror           : ^1
  paste               : ^0.1


dev-dependencies:

  assert_matches    : ^1
  pretty_assertions : ^0.6
  flexi_logger      : { version: ^0.15, default-features: false }

  async_executors   : { version: ^0.2, features: [ spawn_handle, async_std, threadpool ] }
  futures_ringbuf   : { version: ^0.2, features: [ tokio ] }
  futures-test      : =0.3.4
  futures           : { version: =0.3.4, features: [ thread-pool ] }
  tokio             : { version: ^0.2, features: [ sync, stream ] }
  thespis_impl      : { path: ../thespis_impl }
  async-std         : { version: ^1, features: [ attributes ] }

profile:

  release:

    opt-level    : 3
    codegen-units: 1

    lto          : false
    debug        : true


